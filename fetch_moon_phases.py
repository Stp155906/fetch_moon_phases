# -*- coding: utf-8 -*-
"""fetch_moon_phases.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WRH0aZLyOpeqVwaVhNcSlhg0sk0Sd_Hw
"""

import requests
import math
from datetime import datetime, timedelta
import json

def fetch_ephemeris_data(body, date):
    cleaned_date = date.strip()
    start_time = cleaned_date + ' 00:00'
    stop_time = cleaned_date + ' 23:59'

    url = f"https://ssd.jpl.nasa.gov/api/horizons.api?format=text&COMMAND='{body}'&EPHEM_TYPE='OBSERVER'&CENTER='500@399'&START_TIME='{start_time}'&STOP_TIME='{stop_time}'&STEP_SIZE='1 d'&QUANTITIES='1,2'"

    response = requests.get(url)

    if response.status_code != 200:
        raise Exception('Error fetching data from API')

    return response.text

def parse_ephemeris_data(content):
    lines = content.split('\n')
    data = {}
    start_data = False

    for line in lines:
        if line.startswith('$$SOE'):
            start_data = True
            continue
        if line.startswith('$$EOE'):
            break
        if start_data:
            fields = line.strip().split()
            if len(fields) >= 8:
                data['ra'] = float(fields[2])
                data['dec'] = float(fields[3])
                data['dist'] = float(fields[4])
    return data

def calculate_moon_phase(moon_data, sun_data):
    phase_angle = math.acos(math.cos(math.radians(moon_data['ra'] - sun_data['ra'])) * math.cos(math.radians(moon_data['dec'] - sun_data['dec'])))
    illuminated_fraction = (1 + math.cos(phase_angle)) / 2

    if illuminated_fraction < 0.1:
        phase = 'New Moon'
    elif illuminated_fraction < 0.25:
        phase = 'Waxing Crescent'
    elif illuminated_fraction < 0.5:
        phase = 'First Quarter'
    elif illuminated_fraction < 0.75:
        phase = 'Waxing Gibbous'
    elif illuminated_fraction < 0.9:
        phase = 'Full Moon'
    else:
        phase = 'Waning Gibbous'

    return phase

def fetch_moon_phase(date):
    moon_data_raw = fetch_ephemeris_data('301', date)  # 301 is the ID for the Moon
    sun_data_raw = fetch_ephemeris_data('10', date)  # 10 is the ID for the Sun

    moon_data = parse_ephemeris_data(moon_data_raw)
    sun_data = parse_ephemeris_data(sun_data_raw)

    return calculate_moon_phase(moon_data, sun_data)

def main():
    today = datetime.utcnow().date()
    week_data = []

    for i in range(7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        day_of_week = date.strftime("%A")
        try:
            phase = fetch_moon_phase(date_str)
        except Exception as e:
            phase = f"Error fetching data: {e}"
        week_data.append({
            "date": date_str,
            "day": day_of_week,
            "moon_phase": phase
        })

    with open('moon_phases.json', 'w') as f:
        json.dump(week_data, f, indent=4)

    return week_data

if __name__ == "__main__":
    weekly_data = main()
    print(json.dumps(weekly_data, indent=4))